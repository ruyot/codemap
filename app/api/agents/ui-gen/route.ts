import { NextRequest, NextResponse } from 'next/server'
import Groq from 'groq-sdk'
import { ReactFlowSchema } from '@/types'

const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY || 'mock-key'
})

export async function POST(request: NextRequest) {
  try {
    const { message, thread } = await request.json()
    const { metadata, prompt } = message.payload

    // For development, return mock UI schema
    if (!process.env.GROQ_API_KEY || process.env.GROQ_API_KEY === 'mock-key') {
      const mockSchema: ReactFlowSchema = {
        nodes: [
          {
            id: 'header',
            position: { x: 100, y: 50 },
            data: { label: 'Header Component', filePath: 'components/Header.tsx' },
            style: { background: '#3b82f6', color: 'white' }
          },
          {
            id: 'main',
            position: { x: 100, y: 200 },
            data: { label: 'Main Content', filePath: 'components/Main.tsx' },
            style: { background: '#10b981', color: 'white' }
          },
          {
            id: 'sidebar',
            position: { x: 400, y: 200 },
            data: { label: 'Sidebar', filePath: 'components/Sidebar.tsx' },
            style: { background: '#f59e0b', color: 'white' }
          },
          {
            id: 'footer',
            position: { x: 100, y: 350 },
            data: { label: 'Footer Component', filePath: 'components/Footer.tsx' },
            style: { background: '#6366f1', color: 'white' }
          }
        ],
        edges: [
          { id: 'e1', source: 'header', target: 'main', animated: true },
          { id: 'e2', source: 'main', target: 'sidebar', animated: true },
          { id: 'e3', source: 'main', target: 'footer', animated: true }
        ],
        sidebarGroups: [
          {
            id: 'layout',
            title: 'Layout Components',
            items: [
              { id: 'header', label: 'Header', icon: 'layout-header' },
              { id: 'footer', label: 'Footer', icon: 'layout-footer' }
            ]
          },
          {
            id: 'content',
            title: 'Content Components',
            items: [
              { id: 'main', label: 'Main Content', icon: 'file-text' },
              { id: 'sidebar', label: 'Sidebar', icon: 'sidebar' }
            ]
          }
        ]
      }

      return NextResponse.json({ 
        schema: mockSchema,
        explanation: 'Generated UI schema based on repository metadata and user requirements.'
      })
    }

    // Real Llama API call via Groq
    const systemPrompt = `You are a UI architecture expert. Generate a React Flow schema for a code repository visualization based on the provided metadata and user requirements.

Return a JSON object with this structure:
{
  "nodes": [
    {
      "id": "string",
      "position": { "x": number, "y": number },
      "data": { "label": "string", "filePath": "string" },
      "style": { "background": "string", "color": "string" }
    }
  ],
  "edges": [
    {
      "id": "string", 
      "source": "string", 
      "target": "string", 
      "animated": boolean
    }
  ],
  "sidebarGroups": [
    {
      "id": "string",
      "title": "string", 
      "items": [
        { "id": "string", "label": "string", "icon": "string" }
      ]
    }
  ]
}

Focus on creating a logical, hierarchical layout that represents the code structure effectively.`

    const completion = await groq.chat.completions.create({
      messages: [
        { role: "system", content: systemPrompt },
        { 
          role: "user", 
          content: `Generate UI schema for: ${prompt}\n\nMetadata: ${JSON.stringify(metadata, null, 2)}` 
        }
      ],
      model: "llama3-70b-8192",
      temperature: 0.3,
      max_tokens: 4096
    })

    const response = completion.choices[0]?.message?.content
    if (!response) {
      throw new Error('No response from Llama model')
    }

    try {
      const schema = JSON.parse(response)
      return NextResponse.json({ 
        schema,
        explanation: 'UI schema generated by Llama model based on repository analysis.'
      })
    } catch (parseError) {
      console.error('Failed to parse Llama response:', parseError)
      // Fallback to mock schema
      return NextResponse.json({ 
        schema: {
          nodes: [],
          edges: [],
          sidebarGroups: []
        },
        explanation: 'Failed to parse model response, returned empty schema.'
      })
    }

  } catch (error) {
    console.error('UI generation failed:', error)
    return NextResponse.json({ 
      error: 'Failed to generate UI schema',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
